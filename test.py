import gradio as gr
import requests
import base64
import json
import time
import os
import subprocess
from datetime import datetime
from PIL import Image
import io
from tkinter import Tk, filedialog
from tqdm import tqdm

# ------------------ Inpainting Setup ------------------

webui_server_url = 'http://127.0.0.1:7860'

out_dir = 'api_out'
out_dir_inpaint = os.path.join(out_dir, 'inpaint')
os.makedirs(out_dir_inpaint, exist_ok=True)

FIXED_inpaint = {
    "checkpoint_model": "cosplaymix_v42.safetensors",
    "negative_prompt": "blurred,overlapped,ugly,disfigured,bad quality",
    "seed": 3528166601,
    "steps": 30,
    "sampler_name": "Euler a",
    "width": 576,
    "height": 768,
    "denoising_strength": 0.5,
    "batch_size": 2,
    "cfg_scale": 7.5,
}

lora_prompts_shirt = {
    "brwnV3-000004.safetensors": "upper body,men,wearing,brown,<lora:brwnV3-000004:1.4>,shirt",
    "greentV2-000002.safetensors": "upper body,men,wearing,green,<lora:greentV2-000002:1.4>,t-shirt",
    "new_model.safetensors": "upper body,men,wearing,green,<lora:new_model:1.4>,t-shirt",
    "test_brown.safetensors": "upper body,men,wearing,brown,<lora:test_brown:10.0>,shirt",
    "Demo.safetensors": "upper body,men,wearing,brown,<lora:Demo:1.4>,shirt"
}

lora_prompts_pants = {
    "blackpants.safetensors": "lower body,men,wearing,black,<lora:blackpants:1.5>,pants"
}

# Inpainting Functions
def timestamp():
    return datetime.fromtimestamp(time.time()).strftime("%Y%m%d-%H%M%S")

def encode_image_to_base64(image):
    buffered = io.BytesIO()
    image.save(buffered, format="PNG")
    return base64.b64encode(buffered.getvalue()).decode("utf-8")

def decode_and_save_base64(base64_str, save_path):
    with open(save_path, "wb") as file:
        file.write(base64.b64decode(base64_str))
    return save_path

def call_inpaint_api(payload):
    url = f"{webui_server_url}/sdapi/v1/img2img"
    headers = {"Content-Type": "application/json"}
    
    response = requests.post(url, headers=headers, json=payload)
    result = response.json()
    if "images" in result:
        save_path = os.path.join(out_dir_inpaint, f"inpaint-{timestamp()}.png")
        decode_and_save_base64(result["images"][0], save_path)
        return save_path
    return None

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Inpaint ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∏‡πà‡∏ô LoRA ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
def inpaint_image_with_mask(image, lora_shirt, lora_pants):
    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å LoRA ‡πÉ‡∏´‡πâ‡πÄ‡∏ß‡πâ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏±‡πâ‡∏ô‡πÑ‡∏õ‡πÄ‡∏•‡∏¢
    prompt = ""
    if lora_shirt != "None":
        prompt += lora_prompts_shirt[lora_shirt]
    if lora_pants != "None":
        if prompt:
            prompt += ", "  # ‡πÉ‡∏™‡πà‡∏Ñ‡∏≠‡∏°‡∏°‡πà‡∏≤‡∏Å‡∏±‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á
        prompt += lora_prompts_pants[lora_pants]

    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å LoRA ‡πÄ‡∏•‡∏¢
    if not prompt:
        prompt = "men, realistic, wearing casual clothes"

    payload = {
        "prompt": prompt,
        "negative_prompt": FIXED_inpaint["negative_prompt"],
        "seed": FIXED_inpaint["seed"],
        "steps": FIXED_inpaint["steps"],
        "sampler_name": FIXED_inpaint["sampler_name"],
        "width": FIXED_inpaint["width"],
        "height": FIXED_inpaint["height"],
        "batch_size": FIXED_inpaint["batch_size"],
        "cfg_scale": FIXED_inpaint["cfg_scale"],
        "init_images": [encode_image_to_base64(image['image'])],
        "mask": encode_image_to_base64(image['mask']),
        "denoising_strength": FIXED_inpaint["denoising_strength"],
        "inpainting_fill": 1,
        "inpaint_full_res": True,
        "inpaint_full_res_padding": 32,
        "resize_mode": 1
    }
    
    save_path = call_inpaint_api(payload)
    if save_path:
        return Image.open(save_path)
    return None
# ‡∏™‡∏£‡πâ‡∏≤‡∏á Dropdown LoRA Model ‡πÅ‡∏¢‡∏Å‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á
lora_shirt_models = ["None"] + list(lora_prompts_shirt.keys())
lora_pants_models = ["None"] + list(lora_prompts_pants.keys())

# ------------------ LoRA Training Setup ------------------
UPLOAD_FOLDER = "C:/ProjV.2/kohya_ss/dataset"
INSTANCE_FOLDER = os.path.join(UPLOAD_FOLDER, "images")
CLASS_FOLDER = os.path.join(UPLOAD_FOLDER, "regularization")

# Ensure directories exist
os.makedirs(INSTANCE_FOLDER, exist_ok=True)
os.makedirs(CLASS_FOLDER, exist_ok=True)
os.makedirs(os.path.join(UPLOAD_FOLDER, "trained_models"), exist_ok=True)

# Fixed parameters
FIXED_SETTINGS = {
    "network_module": "networks.lora",
    "resolution": "512",
    "cache_latents": True,
    "gradient_checkpointing": True,
    "fp16": True,
    "no_half_vae": True
}

# Validate dataset structure
def validate_folder(folder):
    if not os.path.exists(folder):
        return f"‚ùå Error: Folder {folder} does not exist!"

    subfolders = [f for f in os.listdir(folder) if os.path.isdir(os.path.join(folder, f))]
    files = [f for f in os.listdir(folder) if os.path.isfile(os.path.join(folder, f))]

    if len(subfolders) == 0 and len(files) == 0:
        return "‚ùå Error: No files or subfolders found! Please select a folder with images."

    return "‚úÖ Folder structure looks good!"


# Function to run LoRA training
def run_lora_training(model_name, steps, epochs, learning_rate, batch_size, repeats, instance_folder, class_folder, output_dir):
    if not output_dir or not instance_folder or not class_folder:
        return "Please select all folders!"

    instance_folder = instance_folder.replace("\\", "/")
    class_folder = class_folder.replace("\\", "/")
    output_dir = output_dir.replace("\\", "/")
    os.makedirs(output_dir, exist_ok=True)



    python_exec = "C:/ProjV.2/kohya_ss/venv/Scripts/python.exe"
    train_script = "C:/ProjV.2/kohya_ss/sd-scripts/train_network.py"

    train_command = [
        python_exec,
        train_script,
        "--pretrained_model_name_or_path", "C:/ProjV.2/kohya_ss/models/cosplaymix_v42.safetensors",
        "--max_train_steps", str(steps),
        "--learning_rate", str(learning_rate),
        "--output_name", model_name,
        "--resolution", FIXED_SETTINGS["resolution"],
        "--output_dir", output_dir,
        "--train_data_dir", os.path.dirname(instance_folder),
        "--reg_data_dir", class_folder,
        "--dataset_repeats", str(repeats),
        "--enable_bucket",
        "--fp16" if FIXED_SETTINGS["fp16"] else None,
        "--gradient_checkpointing" if FIXED_SETTINGS["gradient_checkpointing"] else None,
        "--cache_latents" if FIXED_SETTINGS["cache_latents"] else None,
        "--no_half_vae" if FIXED_SETTINGS["no_half_vae"] else None,
        "--network_module", FIXED_SETTINGS["network_module"]
    ]
    train_command = [cmd for cmd in train_command if cmd]
    print("üöÄ Training command:", " ".join(train_command))
    try:
        process = subprocess.Popen(
            train_command,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            encoding="utf-8"
        )

        for line in iter(process.stdout.readline, ''):
            print(line.strip())


        process.stdout.close()
        process.wait()

        if process.returncode == 0:
            return f"üéâ Training completed successfully: {model_name}"
        else:
            return f"‚ùå Training failed with return code {process.returncode}"

    except Exception as e:
        return f"üö® Error running training: {str(e)}"

# Function to browse folders
def browse_folder():
    root = Tk()
    root.withdraw()
    root.attributes("-topmost", True)
    folder = filedialog.askdirectory()
    root.destroy()
    return folder if folder else "Folder not selected"
# ------------------ Gradio UI with Tabs ------------------
with gr.Blocks() as app:
    with gr.Tab("üñåÔ∏è Inpainting"):
        gr.Markdown("# üéØ Inpainting with LoRA Models")

        # Dropdown LoRA ‡πÅ‡∏¢‡∏Å‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á (‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å None)
        shirt_dropdown = gr.Dropdown(
            lora_shirt_models,
            label="Select Shirt LoRA Model",
            value="None"
        )
        pants_dropdown = gr.Dropdown(
            lora_pants_models,
            label="Select Pants LoRA Model",
            value="None"
        )

        # ‡∏ä‡πà‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏î mask
        image_input = gr.Image(type="pil", tool="sketch", label="Upload and Mask Image")
        output_image = gr.Image(type="pil")

        # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏° inpainting
        gr.Button("Start Inpainting").click(
            fn=inpaint_image_with_mask,
            inputs=[image_input, shirt_dropdown, pants_dropdown],
            outputs=output_image
        )
    # --- LoRA Training Tab ---
    with gr.Tab("üß• LoRA Training"):
        gr.Markdown("# LoRA Training App")

        model_name = gr.Textbox(label="Model Name", value="new_model")
        gr.Markdown("**‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏°‡πÄ‡∏î‡∏•**: ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏ù‡∏∂‡∏Å ‡πÄ‡∏ä‡πà‡∏ô `shirt_v1`,`brownV1`")

        steps = gr.Number(label="Training Steps", value=1000, interactive=True, precision=0)
        gr.Markdown("**‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å (Steps)**: ‡∏¢‡∏¥‡πà‡∏á‡∏°‡∏≤‡∏Å ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏¢‡∏¥‡πà‡∏á‡πÄ‡∏Å‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô ‡πÅ‡∏ï‡πà‡∏Å‡πá‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô<br> "
        "**‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥**<br>"
        "**500-1500**steps ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏•‡∏≤‡∏á")

        epochs = gr.Number(label="Epochs", value=10, interactive=True, precision=0)
        gr.Markdown("**‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏ô‡∏ã‡πâ‡∏≥ (Epochs)**: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏∞‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡πÜ<br> "
        "**‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥**<br>"
        "**5-15** ‡∏£‡∏≠‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏µ")

        learning_rate = gr.Number(label="Learning Rate", value=1e-4, interactive=True)
        gr.Markdown(
            "**‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ (Learning Rate)**:<br>"
            "‡πÄ‡∏•‡∏Ç‡∏ô‡πâ‡∏≠‡∏¢ (‡πÄ‡∏ä‡πà‡∏ô 0.0001) ‚Üí ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏ö‡∏ö‡∏ä‡πâ‡∏≤‡πÜ ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô ‡πÅ‡∏ï‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô<br>"
            "‡πÄ‡∏•‡∏Ç‡∏°‡∏≤‡∏Å (‡πÄ‡∏ä‡πà‡∏ô 0.01) ‚Üí ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÑ‡∏ß ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏à‡∏∞‡∏ô‡πâ‡∏≠‡∏¢‡∏•‡∏á<br>"
            "**‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥**<br>"
            "‡∏ñ‡πâ‡∏≤‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏¢‡∏≠‡∏∞ (>200 ‡∏£‡∏π‡∏õ) ‚Üí 0.0001 <br>"
            "‡∏ñ‡πâ‡∏≤‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≠‡∏¢ (<50 ‡∏£‡∏π‡∏õ) ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏†‡∏≤‡∏û‡πÄ‡∏ô‡∏µ‡∏¢‡∏ô ‚Üí 0.00005 "
        )

        batch_size = gr.Number(label="Batch Size", value=1, interactive=True, precision=0)
        gr.Markdown("**‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏π‡∏õ‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏ö (Batch Size)**:<br>"
            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏î‡∏π‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô ‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≠‡∏¢‡πÉ‡∏ä‡πâ‡πÅ‡∏£‡∏°‡∏ô‡πâ‡∏≠‡∏¢<br>"
            "**‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥**<br>"
            "1 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ram 4-6GB<br>"
            "2 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ram 6-8GB<br>"
            "4 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ram 8-12GB<br>"
            "8 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ram 12-16GB<br>"
            "16+ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ram 16GB+ "
        )

        repeats = gr.Number(label="Repeats", value=10, interactive=True, precision=0)
        gr.Markdown("**‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥ (Repeats)**: ‡πÉ‡∏´‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏î‡∏π‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏¥‡∏°‡∏ã‡πâ‡∏≥‡∏Å‡∏µ‡πà‡∏£‡∏≠‡∏ö ‡∏¢‡∏¥‡πà‡∏á‡∏ã‡πâ‡∏≥‡∏°‡∏≤‡∏Å ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏∞‡∏à‡∏≥‡πÑ‡∏î‡πâ‡πÅ‡∏°‡πà‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô<br> "
        "**‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥**<br>"
        "**10-20** ‡∏£‡∏≠‡∏ö")

        instance_dir_box = gr.Textbox(label="Instance Image", interactive=True)
        gr.Markdown("**Instance Image**: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏™‡πà‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á ‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏Ñ‡∏≠‡∏õ‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏°‡∏∏‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì **15-30** ‡∏£‡∏π‡∏õ<br>"
        "**‡∏Ç‡πâ‡∏≠‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö**<br>"
        "1. ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏π‡∏õ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå ‡πÄ‡∏ä‡πà‡∏ô 18_brownshirt<br>"
        "2. ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ format ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ‡πÄ‡∏ä‡πà‡∏ô brownshirt_0001.jpg, shirt_0002.jpg")
        gr.Button("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Folder Instance Image").click(fn=browse_folder, outputs=instance_dir_box)

        class_dir_box = gr.Textbox(label="Class Image", interactive=True)
        gr.Markdown("**Class Image**: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡πÄ‡∏ä‡πà‡∏ô '‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏Ñ‡∏≠‡∏õ‡∏Å‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ' ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì **100-150** ‡∏£‡∏π‡∏õ<br>"
        "**‡∏Ç‡πâ‡∏≠‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö**<br>"
        "1. ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏π‡∏õ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå ‡πÄ‡∏ä‡πà‡∏ô 18_shirt<br>"
        "2. ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ format ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ‡πÄ‡∏ä‡πà‡∏ô shirt_0001.jpg, shirt_0002.jpg")
        gr.Button("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Folder Class Image").click(fn=browse_folder, outputs=class_dir_box)

        output_dir_box = gr.Textbox(label="‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå", interactive=True)
        gr.Markdown("**‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå**: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ù‡∏∂‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
        gr.Button("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå").click(fn=browse_folder, outputs=output_dir_box)

        start_training_btn = gr.Button("Training Start")
        output_text = gr.Textbox(label="‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å", interactive=False)

        start_training_btn.click(
            fn=run_lora_training,
            inputs=[model_name, steps, epochs, learning_rate, batch_size, repeats, instance_dir_box, class_dir_box, output_dir_box],
            outputs=output_text,
        )



app.launch()
